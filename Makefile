# Global Variables
CXX := /usr/bin/g++
CXX_STANDERD := c++20

# Directories
BIN_DIR := ./bin
SRC_DIR := ./src
INC_DIR := ./include
BUILD_DIR := ./build

# Libraries
LIBS := 


# Find Source Codes, for example, ./src/hello_world.cpp
SRCS := $(shell find $(SRC_DIR) -name '*.cpp')
# Define Objective Files, for example, ./build/hello_world.cpp.o
OBJS := $(patsubst $(SRC_DIR)/%, $(BUILD_DIR)/%.o, $(SRCS))
# Define Dependencies Files, which are generated by gcc after first compilation
# for example, ./build/hello_world.cpp.d
DEPS := $(patsubst $(SRC_DIR)/%, $(BUILD_DIR)/%.d, $(SRCS))
# Define Exectuables, for example, ./bin/hello_world
EXES := $(patsubst $(SRC_DIR)/%.cpp, $(BIN_DIR)/%, $(SRCS))

# Flags
INC_DIR += $(shell find $(SRCS) -type d)
LIB_FLAGS := $(addprefix -l, $(LIBS))
INC_FLAGS := $(addprefix -I, $(INC_DIR))
CXX_FLAGS := -Wall -MMD -MP -std=$(CXX_STANDERD) $(INC_FLAGS)


# Pattern Rules for Executables
$(EXES): $(BIN_DIR)/%: $(BUILD_DIR)/%.cpp.o
	@mkdir -p $(dir $@)
	$(CXX) $(CXX_FLAGS) $(LIB_FLAGS) $(LDFLAGS) -o $@ $< 

# Pattern Rules for Executables
$(OBJS): $(BUILD_DIR)/%.o: $(SRC_DIR)/%
	@mkdir -p $(dir $@)
	$(CXX) $(CXX_FLAGS) -c $< -o $@


# Plicit Rules
echo: 
	$(foreach var, $(sort $(.VARIABLES)),\
        $(if $(filter-out environment% default automatic,$(origin $(var))),\
            $(info $(var): $($(var)))))
.PHONY: echo

clean:
	rm -rf $(BUILD_DIR) $(BIN_DIR)
.PHONY: clean

.DEFAULT_GOAL := all
all: $(EXES)
.PHONY: all


# Inlcude Makefile generated by g++
-include $(DEPS)
